<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Notes</title>
    <description>Hey. I&#39;m a student at Learn.co Full-Stack Web Development Bootcamp. I write about Ruby on Rails, meditation and accelerated learning.
</description>
    <link>http://thelucasmoore.github.io/</link>
    <atom:link href="http://thelucasmoore.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Mon, 29 Feb 2016 13:14:15 -0500</pubDate>
    <lastBuildDate>Mon, 29 Feb 2016 13:14:15 -0500</lastBuildDate>
    <generator>Jekyll v3.0.1</generator>
    
      <item>
        <title>Scraping Websites for Data with Nokogiri</title>
        <description>&lt;p&gt;This is one of the first tools that I’ve learned to use and instantly felt how powerful it is. Nokogiri is a web scraping tool used to parse and search HTML, XML and other documents. It’s simple to use and actually kinda fun. For my first project with it, I built a web scraper that grabs the information for the top books of every century from &lt;a href=&quot;https://www.goodreads.com/list/show/7&quot;&gt;Goodreads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/goodreads.png&quot; alt=&quot;The links for each decade. A great starting point.&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;an-outline-of-this-project&quot;&gt;An Outline of this Project&lt;/h1&gt;

&lt;p&gt;In planning out this project, I envisioned three stages of interaction.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user chooses the decade for which they want to see the top books.&lt;/li&gt;
  &lt;li&gt;The program returns a list of the top books for that specific decade.&lt;/li&gt;
  &lt;li&gt;The user then can get more information about a specific book, like descriptions and ratings.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means building a few methods, one that scrapes information on the decades, one that gathers information on each book and a CLI (Command Line Interface) to interact with these data. (Yes, the word &lt;em&gt;data&lt;/em&gt; is plural).&lt;/p&gt;

&lt;h1 id=&quot;scraping-the-decade-information-from-goodreads&quot;&gt;Scraping the Decade Information from Goodreads&lt;/h1&gt;

&lt;p&gt;We can open, read and parse HTML Pages by requiring both Nokogiri and Open-URI at the top of our document. Then I set the opened Nokogiri document equal to a variable called decades. All of this is contained within the Decade class and a class method called scraper. So &lt;em&gt;Decade.scraper&lt;/em&gt; does exactly what it sounds: scrapes information on the decades.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;nokogiri&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open-uri&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Decade&lt;/span&gt;

&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scraper&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.goodreads.com/list/show/7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#The page of each decade&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div.mediumText a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Each link is iterated over&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Century&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if that link includes the text &quot;centuries&quot;, continue&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#make a new decade object&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Best Books of the &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
									&lt;span class=&quot;c1&quot;&gt;#sets the name equal to the link text, but changes it with gsub&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
									&lt;span class=&quot;c1&quot;&gt;#saves the link to that decade, which we&#39;ll need in a moment.&lt;/span&gt;
					&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;
					&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#saves this decade object into the @@all global variable. &lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice the decades.css line above. &lt;code&gt;.CSS&lt;/code&gt; is a nokogiri method that allows us to narrow in on any part of the HTML document based on CSS classes and IDs. Here, the links for each decade are listed, so I iterate through each one.&lt;/p&gt;

&lt;p&gt;This gives us some nice and tidy data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fb2d521f978 @name=&quot;21st Century&quot;, @url=&quot;https://www.goodreads.com/list/show/7&quot;, @top10=nil&amp;gt;,&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fb2d521f3b0 @name=&quot;20th Century&quot;, @url=&quot;https://www.goodreads.com/list/show/6&quot;, @top10=nil&amp;gt; &lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#etc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;gathering-book-information-for-each-decade&quot;&gt;Gathering Book Information for each Decade&lt;/h1&gt;

&lt;p&gt;So each decade has a top ten books. As the data get scraped above, it doesn’t include the information on the top ten books of that decade: &lt;code&gt;@Top10 = nil&lt;/code&gt;. I need to write code that opens each URL for the decade, pulls the data for each book and returns an array of those books, stored in the @Top10 attribute of the decade.&lt;/p&gt;

&lt;p&gt;To do this, I built a Book class which has a scrape class method. The code below is commented to explain it’s purpose.
Basically, the information for each book is stored in a table row, so for each table row, I grab the needed information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:decade&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#the link argument is where I can pass the URL of each decade&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Nokogiri will open up that URL here&lt;/span&gt;
		&lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#This is where we&#39;ll store the data on the books&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#iterate through each table row&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;td.number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; 
					&lt;span class=&quot;c1&quot;&gt;#this pulls only the first 10. Some decades have 100 books, which we don&#39;t want&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BestBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;#a new instance of the Book class, set to the variable libro&lt;/span&gt;
					&lt;span class=&quot;c1&quot;&gt;#setting all the information by scanning the CSS&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ranking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;td.number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a.bookTitle span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a.bookTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.authorName span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.minirating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;

				&lt;span class=&quot;c1&quot;&gt;#I&#39;m proud of figuring this one out. Finder here is equal to a second Nokogiri link&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;#which opens the link of the book itself to scrape the text of the description,&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;#which is then set as the description attribute.&lt;/span&gt;

				&lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.goodreads.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#description span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;
			&lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#pushes all the book information into an array.&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#after iterating through the top10 books, returns the completed array.&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, to integrate this data with my Decade objects, I created the Decade.books class method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;	&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;
		&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;bookscraper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BestBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#passing the URL to the Book.scrape method mentioned above&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookscraper&lt;/span&gt;
			&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method iterates through @@all the decades, grabs the URL of that decade and passes it to the Book.scrape method.
When the book scraper returns the array of the top ten books, it sets that array equal to the @Top10 attribute of the Decade object.&lt;/p&gt;

&lt;p&gt;So the data for each decade now look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fdba3335d20 @name=&quot;21st Century&quot;, @url=&quot;https://www.goodreads.com/list/show/7&quot;, &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@top10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Book:0x007fdba424b850 &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@ranking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harry Potter and the Deathly Hallows (Harry Potter, #7)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/book/show/136251.Harry_Potter_and_the_Deathly_Hallows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;J.K. Rowling&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.59 avg rating — 1,542,081 ratings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harry is waiting in Privet Drive... etc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Book:0x007fdba33e70c0 &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@ranking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The Hunger Games (The Hunger Games, #1)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/book/show/2767052-the-hunger-games&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Suzanne Collins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.37 avg rating — 4,050,120 ratings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Winning will make you famous. Losing means certain death... etc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#etc, for all 10 books, for each decade. It&#39;s a lot of data. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;building-a-command-line-interface&quot;&gt;Building a Command Line Interface&lt;/h1&gt;

&lt;p&gt;To be able to interact with this information, I’ve built a command line interface. The code is available on &lt;a href=&quot;https://github.com/TheLucasMoore/best-books-of-the-century&quot;&gt;my github&lt;/a&gt; and this video below shows a walkthrough of the program.&lt;/p&gt;

&lt;iframe width=&quot;620&quot; height=&quot;415&quot; src=&quot;https://www.youtube.com/embed/uasxpR7s4zE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;time-to-refactor&quot;&gt;Time to Refactor&lt;/h1&gt;

&lt;p&gt;So this works to achieve a function, but can do so much more elegantly. I plan on refactoring to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Work more quickly by storing the information instead of scraping it each time.&lt;/li&gt;
  &lt;li&gt;To be more graceful in it’s construction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned for the refactored update and the publication of the final gem.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/02/23/Scraping-Websites-With-Nokogiri.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/02/23/Scraping-Websites-With-Nokogiri.html</guid>
        
        
      </item>
    
      <item>
        <title>My Current Dev Environment and Workflow</title>
        <description>&lt;p&gt;I enter full-time-bootcamp-mode in less than two weeks. I’m learning everything I can about optimizing my work flow, strengthening specific skills and I’m reading as much about web development as possible. I am building a workshop to practice my new craft in. Here’s what it looks like right now.&lt;/p&gt;

&lt;h3 id=&quot;my-development-environment&quot;&gt;My Development Environment&lt;/h3&gt;

&lt;p&gt;In this screenshot you can see this very article as I was writing it. Only the text outline is in the image, but the development environment I’m using is what’s important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/workflow.png&quot; alt=&quot;workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I work with &lt;em&gt;Firefox&lt;/em&gt;, &lt;em&gt;Sublime Text 3&lt;/em&gt; and &lt;em&gt;Terminal&lt;/em&gt; each as a full screen app. I swipe between them with a three fingers. 
This arrangement is the quickest way to code that I’ve found. I code in Sublime in the center and can swipe left to see changes in the browser or swipe right to access Terminal.&lt;/p&gt;

&lt;h3 id=&quot;workflow-magic-with-package-control&quot;&gt;Workflow Magic with Package Control&lt;/h3&gt;

&lt;p&gt;I found &lt;a href=&quot;https://scotch.io/bar-talk/best-of-sublime-text-3-features-plugins-and-settings&quot;&gt;this amazing article&lt;/a&gt; about optimizing &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; to do such magical things with &lt;em&gt;Package Control&lt;/em&gt;. I giggled a few times as the reality of Package Control washed over me. It’s full of so many amazing shortcuts!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;After installing Package Control&lt;/a&gt;, each repetitive task that had been part of my development process now has an quicker and more elegant solution. And in way fewer keystrokes. Those saved seconds add up into minutes and hours across a day of work.&lt;/p&gt;

&lt;p&gt;I installed the Package Control script in Sublime text by copying and pasting the code and adding it into the console with &lt;code&gt;Tab + ~&lt;/code&gt;. I installed the following packages by hitting &lt;code&gt;Command + Shift + P&lt;/code&gt;to open the Command Palette, and typing &lt;code&gt;Install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/package_control.png&quot; alt=&quot;package control&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then press &lt;code&gt;Enter&lt;/code&gt; and search the following packages and install them by hitting enter again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/install.png&quot; alt=&quot;install&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-new-file&quot;&gt;Advanced New File&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-7-seconds-a-save-which-is-about-15-minutes-a-day-if-i-save-files-150-times&quot;&gt;Time Saved: 7 seconds a save, which is about 15 minutes a day if I save files 150 times.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced.png&quot; alt=&quot;advanced&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When making a new file in Sublime, the default requires us to hit &lt;code&gt;Command + S&lt;/code&gt; to save the file, to name it, then to save it. It took a few seconds each time I repeated the task, which was often. With &lt;em&gt;AdvancedNewFile&lt;/em&gt; installed, a menu pops up instantly in the status bar to name and save the new file just created.&lt;/p&gt;

&lt;h3 id=&quot;git-for-sublime&quot;&gt;Git for Sublime&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-30-seconds-a-commit-which-is-about-10-minutes-a-day-if-i-commit-to-github-20-times-a-day&quot;&gt;Time Saved: 30 seconds a commit, which is about 10 minutes a day if I commit to Github 20 times a day.&lt;/h1&gt;

&lt;p&gt;Throught the same shortcut process above, I can now use Git right from Sublime Text, to stage, commit and push all my files to Github.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Command + Shift + P&lt;/code&gt;
Type “Quick Commit” to stage all the files and write your commit message. 
&lt;code&gt;Command + Shift + P&lt;/code&gt;
Type “Push” to push those changes to Github’s remote servers.&lt;/p&gt;

&lt;h3 id=&quot;emmet&quot;&gt;Emmet&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-its-hard-to-estimate-but-ill-roughly-guess-itll-save-me-oodles-of-time&quot;&gt;Time Saved: It’s hard to estimate, but I’ll roughly guess it’ll save me oodles of time.&lt;/h1&gt;

&lt;p&gt;Emmet is a HTML text-expander. I type a snippet in SublimeText and press &lt;code&gt;Tab&lt;/code&gt; to fill in the expanded and formatted code snippet.&lt;/p&gt;

&lt;p&gt;It allows logical commands like writing “link” &lt;code&gt;+ Tab&lt;/code&gt; to autocomplete to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It also has ability to make nested syblings by typing &lt;code&gt;div&amp;gt;ul&amp;gt;li&lt;/code&gt; I can generate the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are my favorite three packages for Package Control. I’d appreciate any other work flow tips or your critiques of mine. You can reach out to me on &lt;a href=&quot;https://twitter.com/thelucasmoore&quot;&gt;Twitter&lt;/a&gt; or my email in the footer below.&lt;/p&gt;

&lt;h1 id=&quot;prepare-the-preparations&quot;&gt;Prepare the Preparations&lt;/h1&gt;

&lt;p&gt;The last things I’m doing before the bootcamp starts in polishing up my &lt;a href=&quot;https://www.codecademy.com/en/tracks/javascript&quot;&gt;Javascript skills on Codecademy&lt;/a&gt; and saving the most useful Web Development articles I find and tagging them carefully in &lt;a href=&quot;https://evernote.com&quot;&gt;Evernote&lt;/a&gt;, for later reference.&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/01/26/My-Current-Dev-Environment-And-Workflow-Tips.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/01/26/My-Current-Dev-Environment-And-Workflow-Tips.html</guid>
        
        
      </item>
    
      <item>
        <title>How and Why I Made this Blog</title>
        <description>&lt;p&gt;This website is all about what I learn as a Web Developer as I complete the &lt;a href=&quot;http://learn.co&quot;&gt;Learn.co Coding Bootcamp&lt;/a&gt;. Here live my lessons, notes &amp;amp; reflections as I move towards a career as a Full-Stack Developer. 
&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;p&gt;I believe in learning by doing, so my first lesson is building this very blog, venturing away from the complicated simplicity of Wordpress. I still have my &lt;a href=&quot;http://thelucasmoore.com&quot;&gt;personal blog&lt;/a&gt; for all things personal, but am writing about Ruby on Rails development here.&lt;/p&gt;

&lt;h3 id=&quot;how-i-made-this-blog&quot;&gt;How I Made this Blog&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jekyll.png&quot; alt=&quot;Jekyll Documentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This blog is built with Jekyll and hosted on Github Pages. After reading through the documentation for &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and &lt;a href=&quot;http://daringfireball.net/projects/markdown/basics&quot;&gt;Markdown&lt;/a&gt;, I built this site in about five minutes and then started writing this post. Here’s how:&lt;/p&gt;

&lt;h1 id=&quot;command-line-web-design&quot;&gt;1. Command Line Web Design&lt;/h1&gt;

&lt;p&gt;Modern web design uses the command line to move swiftly. One can construct complete sites, like this one, in a few lines of code. That’s assuming your development environment is set up, which you can learn in &lt;a href=&quot;http://webdesign.tutsplus.com/articles/the-command-line-for-web-design-introduction--cms-23493&quot;&gt;this great tutorial series&lt;/a&gt; on Terminal for Web Design.&lt;/p&gt;

&lt;h1 id=&quot;make-a-new-jekyll-blog-in-terminal&quot;&gt;2. Make a New Jekyll Blog in Terminal&lt;/h1&gt;

&lt;p&gt;With the Jekyll gem installed, I typed the following into my terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ jekyll new my_blog_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes a new Jekyll blog, all tidy and ready to go.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd my_blog_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This brings me into that newly created folder containing the Jekyll site. I also opened up this folder in &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text&lt;/a&gt; to edit it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ jekyll serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This runs the site on localhost, so I can see changes I make at localhost:4000 in my browser.&lt;/p&gt;

&lt;p&gt;Lastly, I edited the &lt;code&gt;_config.yml&lt;/code&gt; to my own information in Sublime.&lt;/p&gt;

&lt;h1 id=&quot;host-it-on-github&quot;&gt;3. Host it on Github&lt;/h1&gt;

&lt;p&gt;I also have this folder set up as a repository on &lt;a href=&quot;https://github.com/TheLucasMoore/thelucasmoore.github.io&quot;&gt;my Github&lt;/a&gt;. Any repository that is set as &lt;em&gt;your-username&lt;/em&gt;.github.io is automatically structured to work on Github Pages. When I update the blog from my computer and push the updates to Github, this website updates. Effortless.&lt;/p&gt;

&lt;h1 id=&quot;write-in-markdownmk&quot;&gt;4. Write in &lt;a href=&quot;http://daringfireball.net/projects/markdown/basics&quot;&gt;Markdown&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts.png&quot; alt=&quot;New Blog Post&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Markdown is a beautifully simple way to write for the web. The syntax took me about 15 minutes to learn, since it’s so intuitive. To make a new blog post, I just create a new file in the &lt;code&gt;_posts&lt;/code&gt; folder that follows the &lt;code&gt;YEAR-MONTH-DAY-title.markdown&lt;/code&gt; naming convention.&lt;/p&gt;

&lt;h1 id=&quot;push-to-a-static-web-page&quot;&gt;5. Push to a Static Web Page&lt;/h1&gt;

&lt;p&gt;Finally, any time I update this site, I push the changes to Github. Jekyll does all the work of compiling the file structure and converting the Markdown to HTML. There is no server database, simply an agile static page.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jan 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/01/16/How-and-Why-I-Created-This-Blog.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/01/16/How-and-Why-I-Created-This-Blog.html</guid>
        
        
      </item>
    
  </channel>
</rss>
