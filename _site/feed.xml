<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Coding Notes</title>
    <description>Hey. I&#39;m a student at Learn.co Full-Stack Web Development Bootcamp. I write about Ruby on Rails, meditation and accelerated learning.
</description>
    <link>http://thelucasmoore.github.io/</link>
    <atom:link href="http://thelucasmoore.github.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 15 May 2016 18:42:33 -0500</pubDate>
    <lastBuildDate>Sun, 15 May 2016 18:42:33 -0500</lastBuildDate>
    <generator>Jekyll v3.1.2</generator>
    
      <item>
        <title>Why I&#39;m Learning to Develop Software</title>
        <description>&lt;p&gt;As I’m in the home stretch of coding school, I’ve started to reflect on what motivates me to learn this stuff.&lt;/p&gt;

&lt;h2 id=&quot;being-skilled&quot;&gt;Being Skilled&lt;/h2&gt;

&lt;p&gt;I’ve always been a tinkerer. I taught myself HTML and CSS in high school. I was that kid that installed games on my TI-83 calculator. I used to make custom themes for iPods by modifying the firmware with software called &lt;em&gt;iPodWizard&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Tinkering with things provides an immense intellectual satisfaction for me. I love the process. Take it apart. See how it works. Break it. Piece it back together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/LlyclUtYHyz8A/giphy.gif&quot; alt=&quot;spongbob-builds&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Building a project that pull from a public API, or allows a user to sign in with Facebook feels more satisfying. Programming is like a superpower, closer to the cusp of the radically innovative movements of the internet.&lt;/p&gt;

&lt;h2 id=&quot;program-or-be-programmed&quot;&gt;Program or Be Programmed&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/1C0ibNXMKQeCk/giphy.gif&quot; alt=&quot;spongebob-reads&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I recently read a great book by Douglas Rushkoff called &lt;a href=&quot;http://www.rushkoff.com/books/program-or-be-programmed/&quot;&gt;Program or Be Programmed&lt;/a&gt;. In it, he talks of how technology is so swiftly modifying the world we live in. Our manner of interacting with people, with information and with each other is shaped by programs that someone wrote, whether on our phone or computer. He says:&lt;/p&gt;

&lt;h1 id=&quot;technology-is-fast-becoming-the-boundaries-of-our-perceptual-and-conceptual-apparatus-the-edge-between-our-nervous-systems-and-everyone-elses-our-understanding-of-the-world-and-the-world-itself&quot;&gt;“Technology is fast becoming the boundaries of our perceptual and conceptual apparatus; the edge between our nervous systems and everyone else’s, our understanding of the world and the world itself.”&lt;/h1&gt;

&lt;p&gt;So by learning to program, I have more of an understanding of the ways software is shaping our perception behind the scenes. When I see a gap there, I now know how to build something to fill it. It isn’t enough to know how to use programs other people wrote. I want to build the programs themselves. He goes on to explain:&lt;/p&gt;

&lt;h1 id=&quot;programming-is-the-sweet-spot-the-high-leverage-point-in-a-digital-society-if-we-dont-learn-to-program-we-risk-being-programmed-ourselves&quot;&gt;“Programming is the sweet spot, the high leverage point in a digital society. If we don’t learn to program, we risk being programmed ourselves.”&lt;/h1&gt;

&lt;h2 id=&quot;the-open-source-web&quot;&gt;The Open Source Web&lt;/h2&gt;

&lt;p&gt;A huge perk of programming is being able to participate in the beautiful community of &lt;a href=&quot;https://opensource.org/faq&quot;&gt;Open Source Projects&lt;/a&gt;. Philosophically, I love that so many projects are decidedly open source. The code is out in the open, for anyone to read, tinker with and &lt;a href=&quot;https://github.com/jekyll/jekyll/pull/4888&quot;&gt;submit modifications&lt;/a&gt; to.&lt;/p&gt;

&lt;p&gt;This community is moving the internet and humanity forward. Open Source projects are building things that work well and putting it out there to share, instead of keeping it private. If I can program, I can help build this awesome world.&lt;/p&gt;

&lt;p&gt;Rushkoff sums this movement up quite well:&lt;/p&gt;

&lt;h1 id=&quot;in-the-long-term-if-we-take-up-this-challenge-we-are-looking-at-nothing-less-than-the-conscious-collective-intervention-of-human-beings-in-their-own-evolution&quot;&gt;“In the long term, if we take up this challenge, we are looking at nothing less than the conscious, collective intervention of human beings in their own evolution.”&lt;/h1&gt;

&lt;p&gt;That’s what gets me super jazzed about developing software.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/9d1Fo0XyIYXzW/giphy.gif&quot; alt=&quot;spongebob-dances&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 15 May 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/05/15/Why-Im-Learning-To-Develop-Software.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/05/15/Why-Im-Learning-To-Develop-Software.html</guid>
        
        
      </item>
    
      <item>
        <title>Rails Project Time, Seeds and Testing</title>
        <description>&lt;p&gt;For my final project in rails, I put into practice the more complicated aspects of user authentication and authorization. It’s a simple recipe tracker, but under the hood it is doing some awesome stuff. Watch this video to get an idea of the web application and then read below to understand how it’s built.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/705Bob7Z2-E&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h2 id=&quot;authentication-with-devise-and-omniauth&quot;&gt;Authentication with Devise and Omniauth&lt;/h2&gt;

&lt;p&gt;The user sign up process is built with Devise, which by default only asks for a user’s email and password. I added a name and a user’s role (like an administrator, moderator or user) to the User table in the database. I also used enum to create user roles in the User model, setting the default to ‘user’ after initializing a new User. This also gives me methods like &lt;code&gt;User.role&lt;/code&gt; and &lt;code&gt;User.admin?&lt;/code&gt;, which returns true if the user is an admin.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;User&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActiveRecord&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

 &lt;span class=&quot;n&quot;&gt;enum&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;role: &lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:moderator&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:admin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;after_initialize&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:set_default_user_role&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_default_user_role&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;role&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;role&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I had to modify Devise’s default controllers to allow &lt;code&gt;:name&lt;/code&gt; and &lt;code&gt;:role&lt;/code&gt; in the strong params of the Users::RegistrationsController.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Users&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegistrationsController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Devise&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;RegistrationsController&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# If you have extra params to permit, append them to the sanitizer.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure_sign_up_params&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;devise_parameter_sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:sign_up&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;# If you have extra params to permit, append them to the sanitizer.&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure_account_update_params&lt;/span&gt;
     &lt;span class=&quot;n&quot;&gt;devise_parameter_sanitizer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:account_update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;u&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;permit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:role&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:password_confirmation&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
   &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I also needed to modify the views for users to show links to delete comments conditionally, based on their role.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#Comments.html.erb&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;

&lt;span class=&quot;nf&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comment&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;id&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%&amp;gt;
  &amp;lt;%= link_to &quot;Delete&quot;, recipe_comment_path(@recipe, comment.id), method: :delete %&amp;gt;&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sx&quot;&gt;% end &lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&amp;gt;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h2 id=&quot;authorization-with-pundit&quot;&gt;Authorization with Pundit&lt;/h2&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/elabs/pundit&quot;&gt;The Pundit gem&lt;/a&gt; sets up simple policies that verify whether a user has a particular role before authorizing them to do that action. So if only administrators and moderators can edit comments the &lt;code&gt;CommentPolicy.rb&lt;/code&gt; looks like:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CommentPolicy&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ApplicationPolicy&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;edit?&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;admin?&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;moderator?&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It is called by simply adding &lt;code&gt;authorize @comment&lt;/code&gt; into &lt;em&gt;comments_controller.rb&lt;/em&gt;. I also added a custom rescue for Pundit errors in the ApplicationController.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ApplicationController&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ActionController&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Base&lt;/span&gt;

  &lt;span class=&quot;kp&quot;&gt;include&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pundit&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;rescue_from&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Pundit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;NotAuthorizedError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;with: :user_not_authorized&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;user_not_authorized&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;flash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:alert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Access denied.&quot;&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;redirect_to&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;referrer&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;root_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;So if a user tries to do something they shouldn’t be able to do, through some internet wizardry, a notification pops up and says:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/l3V0JykFG4Jqtg7vi/giphy.gif&quot; alt=&quot;nope&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;building-seed-data&quot;&gt;Building Seed Data&lt;/h2&gt;

&lt;p&gt;To work with the web application in my development environment, I built my own seed data using &lt;a href=&quot;https://github.com/stympy/faker&quot;&gt;the faker gem&lt;/a&gt;. So to create 10 fake users:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;#db/seeds.rb&lt;/span&gt;
&lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; 
    &lt;span class=&quot;no&quot;&gt;User&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;name: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;email: &lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Faker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Internet&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;email&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;ss&quot;&gt;password: &lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;testtest&quot;&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Then when I run &lt;code&gt;rake db:seed&lt;/code&gt; I have some users set up to test out permissions with. They’ve got great names too, like &lt;em&gt;Constantin Rath V&lt;/em&gt;. I also made seed data for recipes, ingredients and comments.&lt;/p&gt;

&lt;h2 id=&quot;writing-tests&quot;&gt;Writing Tests&lt;/h2&gt;

&lt;p&gt;My favorite part of this project was learning the importance of testing organically. I was trying to build the various user roles and found myself manually signing up users over and over, trying to test the role function. In a &lt;a href=&quot;http://railscasts.com/episodes/275-how-i-test?view=comments&quot;&gt;railscast&lt;/a&gt; I watched, Ryan Bates mentioned that if you’re testing things in the browser, you should probably write a test for that.&lt;/p&gt;

&lt;p&gt;So I used Capybara and Rspec to write a test that signs up a user for each role and then checks if they are signed up in that role. Here’s the test for an admin:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# spec/features&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;it&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;signs up an Admin&quot;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/users/sign_up&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Name&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;John Admin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Email&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;John@inter.net&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Password&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;testtest&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;fill_in&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Password confirmation&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:with&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;testtest&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;select&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;admin&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;Role&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;click_button&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;Sign up&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

   &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;You have signed up successfully&#39;&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;visit&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&#39;/about&#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;expect&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;page&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;have_content&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;admin&#39;&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;That allowed me to just run the test while I was figuring out the sign up process. When the test passed, I knew it worked without having to manually sign up a new user in all three roles. This is a simple test and I admire the more complex tests used in Test Drive Development. I’ve learned the importance of writing and having quality tests.&lt;/p&gt;

&lt;h2 id=&quot;in-summation&quot;&gt;In Summation&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;https://media.giphy.com/media/tyxovVLbfZdok/giphy.gif&quot; alt=&quot;img&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I learned a lot during this process and did many a first-pump when things started to function as I invisioned them. The biggest lesson I’ve learned from this project is about the importance and practicality of Test Driven Development (TDD). That’s how Learn is built and how I most enjoy writing programs.&lt;/p&gt;

&lt;p&gt;Please check out the code on &lt;a href=&quot;https://github.com/TheLucasMoore/rails_final_project&quot;&gt;github&lt;/a&gt; and comment where you see something you like, or that could be improved.&lt;/p&gt;
</description>
        <pubDate>Sun, 01 May 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/05/01/Rails-Project-Time.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/05/01/Rails-Project-Time.html</guid>
        
        
      </item>
    
      <item>
        <title>Building a To Do List Web App in Ruby with Sinatra</title>
        <description>&lt;p&gt;I am at an exciting point in the boot camp process. The building blocks of the concepts I’ve learned so far are starting to finally come together! I built a web app that actually functions as a to do list. Watch the video walk through at the end of this post to see it in action.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/todoo.png&quot; alt=&quot;todoo screenshot&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Learning like this feels genuinely &lt;em&gt;FUN&lt;/em&gt;. I had a blast building this latest project.&lt;/p&gt;

&lt;h2 id=&quot;mvc-structure&quot;&gt;MVC Structure&lt;/h2&gt;

&lt;p&gt;To build the most usable and readable code, it’s common practice to divide a project into models, views and controllers.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://45.media.tumblr.com/tumblr_luxoeyQiQw1qf7to0o1_500.gif&quot; alt=&quot;gif of good burger&quot; /&gt;&lt;/p&gt;

&lt;p&gt;So you can understand what I’m talking about, think of a restaurant. You, the user, will walk in, put in an order and get a plate of food.
This is just like when you go a website - you log in, click some stuff and see information.&lt;/p&gt;

&lt;p&gt;But the magic of food and websites suddenly appearing before you has a secret three part process - a Model, a View and a Controller.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;The Model is the chefs in the back room, chopping up the food, cooking it and flavoring everything. 
This is the bulk of the code that does the work of sorting classes, methods and data structures.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The Controller is the waiter who asks what you’d like to eat, listens and then connects your request to the chefs. Then they deliver the food you ordered.
This is where &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;Sinatra&lt;/a&gt; comes in to handle the HTTP requests of URL paths, as well as patching and deleting data from the server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;The View is the pretty plate of food before you. 
This is the final HTML pages that a user interacts with. In this project, that means the ToDoo web interface.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Here’s each element of the MVC architecture that I built for this application, with a description and video explanation below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/files.png&quot; alt=&quot;screenshot of file structure&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;views&quot;&gt;Views&lt;/h2&gt;

&lt;p&gt;A user needs to either sign up or log in.&lt;/p&gt;

&lt;p&gt;A task needs to be created, edited, viewed and deleted.&lt;/p&gt;

&lt;p&gt;A list also needs to be created, edited, viewed and deleted.&lt;/p&gt;

&lt;p&gt;As you can see above, each of these functions has its own page with a form that posts data to the database, or a neat little ruby snippet that interjects data from the database into the page.&lt;/p&gt;

&lt;p&gt;Here’s an example from the view at &lt;code&gt;/lists/new&lt;/code&gt; which makes a new list and an associated task.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;h1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;New&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;/h1&amp;gt;
&amp;lt;form method=&quot;post&quot; action=&quot;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lists&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;kp&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt; # form code for the controller to handle
  &amp;lt;input type=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; name=&quot;&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; placeholder=&quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;List&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Name&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;input type=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; placeholder=&quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Add&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Your&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;First&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;&amp;lt;br&amp;gt;&amp;lt;br&amp;gt;
  &amp;lt;input class=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;btn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;primary&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; type=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;submit&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; name=&quot;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot; value=&quot;&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Create&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&amp;gt;
&amp;lt;/form&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;These &lt;code&gt;.erb&lt;/code&gt; pages also inherit their styling from a &lt;code&gt;layout.erb&lt;/code&gt; document that pulls stylesheets for &lt;a href=&quot;http://getbootstrap.com/getting-started/&quot;&gt;Bootstrap&lt;/a&gt; and &lt;a href=&quot;https://fortawesome.github.io/Font-Awesome/&quot;&gt;FontAwesome&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&quot;models&quot;&gt;Models&lt;/h2&gt;

&lt;p&gt;I envisioned a simple to do list application, which means it should have a &lt;em&gt;user&lt;/em&gt;, that can make a &lt;em&gt;list&lt;/em&gt; and add &lt;em&gt;tasks&lt;/em&gt; to each list.&lt;/p&gt;

&lt;p&gt;There is a model for User, for List and for Task. Each inherits from &lt;a href=&quot;https://github.com/rails/rails/tree/master/activerecord&quot;&gt;ActiveRecord&lt;/a&gt;, which handles the persistence of data to the database. I was building each of the handy methods that come baked in with ActiveRecord from scratch before this, so I also understand the magic behind what ActiveRecord accomplishes. But gosh, it feels good to see the magic just work.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;http://cdn2.crushable.com/wp-content/uploads/2014/08/Arrested-Development-Gob-Buster-dance.gif&quot; alt=&quot;GIF OF MAGIC&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;associations-in-the-model&quot;&gt;Associations in the Model&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;A List has many tasks and belongs to a specific user.&lt;/li&gt;
  &lt;li&gt;A Task also belongs to a specific user.&lt;/li&gt;
  &lt;li&gt;A User has many lists and many tasks through lists.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Finally, a user has a secure password, which is built with &lt;a href=&quot;https://github.com/codahale/bcrypt-ruby&quot;&gt;bcrypt&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Check &lt;a href=&quot;https://github.com/TheLucasMoore/todoo&quot;&gt;this project out on Github&lt;/a&gt; to see the database migrations and the structure of the tables that hold these data.&lt;/p&gt;

&lt;h2 id=&quot;controllers&quot;&gt;Controllers&lt;/h2&gt;

&lt;p&gt;The controllers are divided up into a users controller, a task controller and a list controller.&lt;/p&gt;

&lt;p&gt;Take a look at this piece of ListsController.rb&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/lists/new&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redirect_if_not_logged_in&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;erb&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:&#39;/lists/new&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;post&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/lists/new&#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:user_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;create&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;params&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;][&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tasks&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;list&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;tasks&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;redirect&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;/tasks&#39;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;When I navigate to Foo.com/lists/new, this checks if a user is logged in, then loads the view lists/new.erb. That page has the form to make a new list and new task, as mentioned above.&lt;/p&gt;

&lt;p&gt;That form posts the information the user enters as &lt;code&gt;POST &#39;/lists/new&#39;&lt;/code&gt; and creates list and task objects. It then pushes the task into the associated &lt;code&gt;list.tasks&lt;/code&gt;.
Finally, the user is redirected to the /tasks page, which shows their lists of tasks just created.&lt;/p&gt;

&lt;h2 id=&quot;video-walk-through&quot;&gt;Video Walk Through&lt;/h2&gt;

&lt;p&gt;If that doesn’t make sense to you, in this video I’ll walk you through all the features of this web app and explain the inner workings.&lt;/p&gt;

&lt;iframe width=&quot;420&quot; height=&quot;315&quot; src=&quot;https://www.youtube.com/embed/C8myFXhbwCw&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

</description>
        <pubDate>Sun, 27 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/03/27/Building-A-To-Do-List-Web-App-With-Sinatra.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/03/27/Building-A-To-Do-List-Web-App-With-Sinatra.html</guid>
        
        
      </item>
    
      <item>
        <title>How I&#39;ve Learned to Learn During my Coding Bootcamp</title>
        <description>&lt;p&gt;There’s a &lt;a href=&quot;https://www.switchup.org/blog/how-flatiron-school-gets-99-of-grads-jobs&quot;&gt;lot of buzz around coding bootcamps&lt;/a&gt; these days. A crash course in a new set of programming languages can be a huge career boost for bootcamp graduates. I have learned a ton in my first month of Flatiron School’s Learn Verified program. But one of the most important things I’ve learned in how to most effectively learn.&lt;/p&gt;

&lt;h1 id=&quot;if-youre-doing-a-bootcamp-some-of-these-tips-might-help-you-as-much-as-they-help-me&quot;&gt;If you’re doing a bootcamp, some of these tips might help you as much as they help me.&lt;/h1&gt;

&lt;h2 id=&quot;creating-a-focused-environment&quot;&gt;Creating a Focused Environment&lt;/h2&gt;

&lt;p&gt;There are plenty of distractions when working online. I try to always stay directly focused on the content I am learning. I use the &lt;a href=&quot;https://addons.mozilla.org/en-US/firefox/addon/leechblock/&quot;&gt;Firefox Add-On Leechblock&lt;/a&gt; to allow myself only 10 minutes a day on distracting websites like &lt;a href=&quot;https://www.reddit.com/r/digitalnomad&quot;&gt;Reddit&lt;/a&gt;, &lt;a href=&quot;https://www.producthunt.com/&quot;&gt;Product Hunt&lt;/a&gt; and &lt;a href=&quot;https://news.ycombinator.com/news&quot;&gt;Hacker News&lt;/a&gt;. I keep my phone facedown and away from my desk. I play instrumental music (more on that in a bit). I’ve also found how important it is to take notes on the content I am learning. It helps me internalize what I am learning as I learn it.&lt;/p&gt;

&lt;h2 id=&quot;take-a-break&quot;&gt;Take A Break&lt;/h2&gt;

&lt;p&gt;Every twenty or thirty minutes, I take a five minute break. I’ve found that a short break is a breath of fresh air that allows more focus in the long term. Unless I get into a good flow with a longer lab, in which case I keep working.&lt;/p&gt;

&lt;p&gt;The key is to recognize unproductive brain space, like when I’m searching for distractions. Instead of fighting the mind, I take some space to clear it before returning back to learning. This allows me to work almost all day, most days. ;)&lt;/p&gt;

&lt;h2 id=&quot;feel-out-your-brain-space&quot;&gt;Feel Out Your Brain Space&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/assets/brain.jpg&quot; alt=&quot;Waves&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.mind-your-reality.com/brain_waves.html&quot;&gt;The Brain’s States&lt;/a&gt; are super interesting.&lt;/p&gt;

&lt;p&gt;Modern neuroscience knows a lot about our brains. There a few distinct brain spaces that have patterns we can recognize, both through EEG readings and in self-examining meditation. All these process are happening at the same time, but we can move into one dominant thought pattern with some simple exercises.&lt;/p&gt;

&lt;h1 id=&quot;the-first-brain-space-is-beta&quot;&gt;The first brain space is Beta.&lt;/h1&gt;
&lt;p&gt;This is every day consciousness. A mind on the run, perceiving and interpreting. Thinking busy thoughts. Beta level consciousness is the mind when it is wide awake.&lt;/p&gt;

&lt;h1 id=&quot;the-next-in-contrast-is-alpha&quot;&gt;The next, in contrast, is Alpha.&lt;/h1&gt;
&lt;p&gt;This is when the mind is calm and receptive. It’s an open and meditative mind. This is the best way to learn more deeply, as we absorb information most effectively in alpha brain space. Learning while the brain is in an alpha state means that I am learning on two levels (alpha and beta).&lt;/p&gt;

&lt;p&gt;You can easily transition between alpha and beta by relaxing! Take a few breaths, meditate for 20 minutes, or listen to  music. Research shows classical music induces an alpha wave pattern in the mind, but I’m partial to instrumental music like &lt;a href=&quot;https://www.youtube.com/watch?v=UBTUAHGpQqE&quot;&gt;El Ten Eleven&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=7VGNc5ZncNE&quot;&gt;Madlib&lt;/a&gt;, &lt;a href=&quot;https://www.youtube.com/watch?v=dhNfddJRulQ&quot;&gt;Vulfpeck&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=50b5J_ulWhw&quot;&gt;Damu The Fudgemunk&lt;/a&gt; and &lt;a href=&quot;https://www.youtube.com/watch?v=81983x_wgyc&quot;&gt;Thievery Corporation&lt;/a&gt;.&lt;/p&gt;

&lt;h1 id=&quot;the-sleepiest-is-theta-wave&quot;&gt;The sleepiest is Theta Wave.&lt;/h1&gt;
&lt;p&gt;The dreamy space right before you fall asleep is called theta. It’s disorienting, with random dreamy thoughts intermingled with normal ones. The chemical melatonin is released and it lulls us to sleep. Recognizing the sleepy mind and stopping work is equally as important. I’m not learning as effectively as possible if I’m tired.&lt;/p&gt;

&lt;h1 id=&quot;rem-sleep&quot;&gt;REM sleep.&lt;/h1&gt;

&lt;p&gt;REM sleep, or dreaming, is equally important in the learning process. Dreams are the way we digest and store information. I’ve found that getting quality sleep is the best way to internalize lessons and content. Some mornings, I wake up dreaming in code, finding solutions to problems I am stuck on automatically. Let your dreams do the heavy lifting. It’s an evolutionary process to digest information and store it in long term memory.&lt;/p&gt;

&lt;h2 id=&quot;short-term-and-long-term-memory&quot;&gt;Short Term and Long Term Memory&lt;/h2&gt;
&lt;p&gt;Understanding the way memory works can be empowering. Ideas are stored in either our short term or long term memory, based on time and frequency of exposure. Anything can stick in our short term memory after one exposure, sure. But it is only transferred to long term memory if it’s rehearsed immediately. So what’s the most efficient way to store things in our long term memory?&lt;/p&gt;

&lt;p&gt;Research shows short, repeated exposure is actually the best way to memorize something. Rereading my notes on a daily and weekly basis helps me to internalize points and move them into long term memory. It’s the philosophy behind &lt;a href=&quot;http://www.memrise.com/science/&quot;&gt;Memrise&lt;/a&gt;, which is how I’m learning Portuguese.&lt;/p&gt;

&lt;p&gt;This week, I’m returning to old projects and fiddling with them, adding in what I’ve learned from later points. This is a good review and a creative way to solidify new things like database management.&lt;/p&gt;

&lt;h2 id=&quot;what-do-you-do&quot;&gt;What do you do?&lt;/h2&gt;
&lt;p&gt;Anything I’m missing here? What tips do you have for working effectively in a coding bootcamp? Reach out to me on &lt;a href=&quot;https://twitter.com/thelucasmoore&quot;&gt;Twitter&lt;/a&gt;.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Mar 2016 00:00:00 -0500</pubDate>
        <link>http://thelucasmoore.github.io/2016/03/17/How-I-Have-Learned-To-Learn.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/03/17/How-I-Have-Learned-To-Learn.html</guid>
        
        
      </item>
    
      <item>
        <title>Scraping Websites for Data with Nokogiri</title>
        <description>&lt;p&gt;This is one of the first tools that I’ve learned to use and instantly felt how powerful it is. Nokogiri is a web scraping tool used to parse and search HTML, XML and other documents. It’s simple to use and actually kinda fun. For my first project with it, I built a web scraper that grabs the information for the top books of every century from &lt;a href=&quot;https://www.goodreads.com/list/show/7&quot;&gt;Goodreads&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/goodreads.png&quot; alt=&quot;The links for each decade. A great starting point.&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;an-outline-of-this-project&quot;&gt;An Outline of this Project&lt;/h1&gt;

&lt;p&gt;In planning out this project, I envisioned three stages of interaction.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;The user chooses the decade for which they want to see the top books.&lt;/li&gt;
  &lt;li&gt;The program returns a list of the top books for that specific decade.&lt;/li&gt;
  &lt;li&gt;The user then can get more information about a specific book, like descriptions and ratings.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This means building a few methods, one that scrapes information on the decades, one that gathers information on each book and a CLI (Command Line Interface) to interact with these data. (Yes, the word &lt;em&gt;data&lt;/em&gt; is plural).&lt;/p&gt;

&lt;h1 id=&quot;scraping-the-decade-information-from-goodreads&quot;&gt;Scraping the Decade Information from Goodreads&lt;/h1&gt;

&lt;p&gt;We can open, read and parse HTML Pages by requiring both Nokogiri and Open-URI at the top of our document. Then I set the opened Nokogiri document equal to a variable called decades. All of this is contained within the Decade class and a class method called scraper. So &lt;em&gt;Decade.scraper&lt;/em&gt; does exactly what it sounds: scrapes information on the decades.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;nokogiri&#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&#39;open-uri&#39;&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Decade&lt;/span&gt;

&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scraper&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decades&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.goodreads.com/list/show/7&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#The page of each decade&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;decades&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;div.mediumText a&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Each link is iterated over&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;include?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Century&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#if that link includes the text &quot;centuries&quot;, continue&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#make a new decade object&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;gsub&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Best Books of the &quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
				&lt;span class=&quot;c1&quot;&gt;#sets the name equal to the link text, but changes it with gsub&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
				&lt;span class=&quot;c1&quot;&gt;#saves the link to that decade, which we&#39;ll need in a moment.&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt;
		&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;decade&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#saves this decade object into the @@all global variable. &lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
		&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;You’ll notice the decades.css line above. &lt;code&gt;.CSS&lt;/code&gt; is a nokogiri method that allows us to narrow in on any part of the HTML document based on CSS classes and IDs. Here, the links for each decade are listed, so I iterate through each one.&lt;/p&gt;

&lt;p&gt;This gives us some nice and tidy data:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fb2d521f978 @name=&quot;21st Century&quot;, @url=&quot;https://www.goodreads.com/list/show/7&quot;, @top10=nil&amp;gt;,&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fb2d521f3b0 @name=&quot;20th Century&quot;, @url=&quot;https://www.goodreads.com/list/show/6&quot;, @top10=nil&amp;gt; &lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#etc&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;gathering-book-information-for-each-decade&quot;&gt;Gathering Book Information for each Decade&lt;/h1&gt;

&lt;p&gt;So each decade has a top ten books. As the data get scraped above, it doesn’t include the information on the top ten books of that decade: &lt;code&gt;@Top10 = nil&lt;/code&gt;. I need to write code that opens each URL for the decade, pulls the data for each book and returns an array of those books, stored in the @Top10 attribute of the decade.&lt;/p&gt;

&lt;p&gt;To do this, I built a Book class which has a scrape class method. The code below is commented to explain it’s purpose.
Basically, the information for each book is stored in a table row, so for each table row, I grab the needed information.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;

&lt;span class=&quot;kp&quot;&gt;attr_accessor&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:ranking&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:title&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:author&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:rating&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:description&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:decade&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#the link argument is where I can pass the URL of each decade&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#Nokogiri will open up that URL here&lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#This is where we&#39;ll store the data on the books&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;search&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;tr&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#iterate through each table row&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;td.number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;to_i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt; 
			&lt;span class=&quot;c1&quot;&gt;#this pulls only the first 10. Some decades have 100 books, which we don&#39;t want&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BestBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;#a new instance of the Book class, set to the variable libro&lt;/span&gt;
			&lt;span class=&quot;c1&quot;&gt;#setting all the information by scanning the CSS&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;ranking&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;td.number&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;title&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a.bookTitle span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;a.bookTitle&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;href&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;value&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;author&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.authorName span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;rating&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;.minirating&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;strip&lt;/span&gt;

		&lt;span class=&quot;c1&quot;&gt;#I&#39;m proud of figuring this one out. Finder here is equal to a second Nokogiri link&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;#which opens the link of the book itself to scrape the text of the description,&lt;/span&gt;
		&lt;span class=&quot;c1&quot;&gt;#which is then set as the description attribute.&lt;/span&gt;

		&lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Nokogiri&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HTML&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;open&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;https://www.goodreads.com&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;link&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;description&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;finder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;css&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;#description span&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;text&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;
	&lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;push&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;libro&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#pushes all the book information into an array.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;
	&lt;span class=&quot;n&quot;&gt;this&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@top10books&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#after iterating through the top10 books, returns the completed array.&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Now, to integrate this data with my Decade objects, I created the Decade.books class method.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;books&lt;/span&gt;
	&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;bookscraper&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BestBooks&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Book&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;scrape&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#passing the URL to the Book.scrape method mentioned above&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[]&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bookscraper&lt;/span&gt;
		&lt;span class=&quot;n&quot;&gt;geturl&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;top10&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;top10&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
	&lt;span class=&quot;vc&quot;&gt;@@all&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This method iterates through @@all the decades, grabs the URL of that decade and passes it to the Book.scrape method.
When the book scraper returns the array of the top ten books, it sets that array equal to the @Top10 attribute of the Decade object.&lt;/p&gt;

&lt;p&gt;So the data for each decade now look like this:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Decade:0x007fdba3335d20 @name=&quot;21st Century&quot;, @url=&quot;https://www.goodreads.com/list/show/7&quot;, &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@top10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Book:0x007fdba424b850 &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@ranking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harry Potter and the Deathly Hallows (Harry Potter, #7)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/book/show/136251.Harry_Potter_and_the_Deathly_Hallows&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;J.K. Rowling&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.59 avg rating — 1,542,081 ratings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Harry is waiting in Privet Drive... etc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;c1&quot;&gt;#&amp;lt;BestBooks::Book:0x007fdba33e70c0 &lt;/span&gt;
&lt;span class=&quot;vi&quot;&gt;@ranking&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;2&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@title&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;The Hunger Games (The Hunger Games, #1)&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@link&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;/book/show/2767052-the-hunger-games&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@author&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Suzanne Collins&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@rating&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;4.37 avg rating — 4,050,120 ratings&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; 
&lt;span class=&quot;vi&quot;&gt;@description&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;Winning will make you famous. Losing means certain death... etc&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
 &lt;span class=&quot;c1&quot;&gt;#etc, for all 10 books, for each decade. It&#39;s a lot of data. &lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;h1 id=&quot;building-a-command-line-interface&quot;&gt;Building a Command Line Interface&lt;/h1&gt;

&lt;p&gt;To be able to interact with this information, I’ve built a command line interface. The code is available on &lt;a href=&quot;https://github.com/TheLucasMoore/best-books-of-the-century&quot;&gt;my github&lt;/a&gt; and this video below shows a walkthrough of the program.&lt;/p&gt;

&lt;iframe width=&quot;320&quot; height=&quot;215&quot; src=&quot;https://www.youtube.com/embed/uasxpR7s4zE&quot; frameborder=&quot;0&quot; allowfullscreen=&quot;&quot;&gt;&lt;/iframe&gt;

&lt;h1 id=&quot;time-to-refactor&quot;&gt;Time to Refactor&lt;/h1&gt;

&lt;p&gt;So this works to achieve a function, but can do so much more elegantly. I plan on refactoring to:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Work more quickly by storing the information instead of scraping it each time.&lt;/li&gt;
  &lt;li&gt;To be more graceful in it’s construction.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Stay tuned for the refactored update and the publication of the final gem.&lt;/p&gt;
</description>
        <pubDate>Tue, 23 Feb 2016 00:00:00 -0600</pubDate>
        <link>http://thelucasmoore.github.io/2016/02/23/Scraping-Websites-With-Nokogiri.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/02/23/Scraping-Websites-With-Nokogiri.html</guid>
        
        
      </item>
    
      <item>
        <title>My Current Dev Environment and Workflow</title>
        <description>&lt;p&gt;I enter full-time-bootcamp-mode in less than two weeks. I’m learning everything I can about optimizing my work flow, strengthening specific skills and I’m reading as much about web development as possible. I am building a workshop to practice my new craft in. Here’s what it looks like right now.&lt;/p&gt;

&lt;h3 id=&quot;my-development-environment&quot;&gt;My Development Environment&lt;/h3&gt;

&lt;p&gt;In this screenshot you can see this very article as I was writing it. Only the text outline is in the image, but the development environment I’m using is what’s important.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/workflow.png&quot; alt=&quot;workflow&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I work with &lt;em&gt;Firefox&lt;/em&gt;, &lt;em&gt;Sublime Text 3&lt;/em&gt; and &lt;em&gt;Terminal&lt;/em&gt; each as a full screen app. I swipe between them with a three fingers. 
This arrangement is the quickest way to code that I’ve found. I code in Sublime in the center and can swipe left to see changes in the browser or swipe right to access Terminal.&lt;/p&gt;

&lt;h3 id=&quot;workflow-magic-with-package-control&quot;&gt;Workflow Magic with Package Control&lt;/h3&gt;

&lt;p&gt;I found &lt;a href=&quot;https://scotch.io/bar-talk/best-of-sublime-text-3-features-plugins-and-settings&quot;&gt;this amazing article&lt;/a&gt; about optimizing &lt;a href=&quot;http://www.sublimetext.com/3&quot;&gt;Sublime Text&lt;/a&gt; to do such magical things with &lt;em&gt;Package Control&lt;/em&gt;. I giggled a few times as the reality of Package Control washed over me. It’s full of so many amazing shortcuts!&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://packagecontrol.io/installation&quot;&gt;After installing Package Control&lt;/a&gt;, each repetitive task that had been part of my development process now has an quicker and more elegant solution. And in way fewer keystrokes. Those saved seconds add up into minutes and hours across a day of work.&lt;/p&gt;

&lt;p&gt;I installed the Package Control script in Sublime text by copying and pasting the code and adding it into the console with &lt;code&gt;Tab + ~&lt;/code&gt;. I installed the following packages by hitting &lt;code&gt;Command + Shift + P&lt;/code&gt;to open the Command Palette, and typing &lt;code&gt;Install&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/package_control.png&quot; alt=&quot;package control&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Then press &lt;code&gt;Enter&lt;/code&gt; and search the following packages and install them by hitting enter again.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/install.png&quot; alt=&quot;install&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;advanced-new-file&quot;&gt;Advanced New File&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-7-seconds-a-save-which-is-about-15-minutes-a-day-if-i-save-files-150-times&quot;&gt;Time Saved: 7 seconds a save, which is about 15 minutes a day if I save files 150 times.&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/advanced.png&quot; alt=&quot;advanced&quot; /&gt;&lt;/p&gt;

&lt;p&gt;When making a new file in Sublime, the default requires us to hit &lt;code&gt;Command + S&lt;/code&gt; to save the file, to name it, then to save it. It took a few seconds each time I repeated the task, which was often. With &lt;em&gt;AdvancedNewFile&lt;/em&gt; installed, a menu pops up instantly in the status bar to name and save the new file just created.&lt;/p&gt;

&lt;h3 id=&quot;git-for-sublime&quot;&gt;Git for Sublime&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-30-seconds-a-commit-which-is-about-10-minutes-a-day-if-i-commit-to-github-20-times-a-day&quot;&gt;Time Saved: 30 seconds a commit, which is about 10 minutes a day if I commit to Github 20 times a day.&lt;/h1&gt;

&lt;p&gt;Throught the same shortcut process above, I can now use Git right from Sublime Text, to stage, commit and push all my files to Github.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;Command + Shift + P&lt;/code&gt;
Type “Quick Commit” to stage all the files and write your commit message. 
&lt;code&gt;Command + Shift + P&lt;/code&gt;
Type “Push” to push those changes to Github’s remote servers.&lt;/p&gt;

&lt;h3 id=&quot;emmet&quot;&gt;Emmet&lt;/h3&gt;

&lt;h1 id=&quot;time-saved-its-hard-to-estimate-but-ill-roughly-guess-itll-save-me-oodles-of-time&quot;&gt;Time Saved: It’s hard to estimate, but I’ll roughly guess it’ll save me oodles of time.&lt;/h1&gt;

&lt;p&gt;Emmet is a HTML text-expander. I type a snippet in SublimeText and press &lt;code&gt;Tab&lt;/code&gt; to fill in the expanded and formatted code snippet.&lt;/p&gt;

&lt;p&gt;It allows logical commands like writing “link” &lt;code&gt;+ Tab&lt;/code&gt; to autocomplete to&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;link&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;rel=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;stylesheet&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;href=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;It also has ability to make nested syblings by typing &lt;code&gt;div&amp;gt;ul&amp;gt;li&lt;/code&gt; I can generate the code:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-html&quot; data-lang=&quot;html&quot;&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;div&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;li&amp;gt;&lt;/span&gt;
			
		&lt;span class=&quot;nt&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
	&lt;span class=&quot;nt&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;&amp;lt;/div&amp;gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Those are my favorite three packages for Package Control. I’d appreciate any other work flow tips or your critiques of mine. You can reach out to me on &lt;a href=&quot;https://twitter.com/thelucasmoore&quot;&gt;Twitter&lt;/a&gt; or my email in the footer below.&lt;/p&gt;

&lt;h1 id=&quot;prepare-the-preparations&quot;&gt;Prepare the Preparations&lt;/h1&gt;

&lt;p&gt;The last things I’m doing before the bootcamp starts in polishing up my &lt;a href=&quot;https://www.codecademy.com/en/tracks/javascript&quot;&gt;Javascript skills on Codecademy&lt;/a&gt; and saving the most useful Web Development articles I find and tagging them carefully in &lt;a href=&quot;https://evernote.com&quot;&gt;Evernote&lt;/a&gt;, for later reference.&lt;/p&gt;

</description>
        <pubDate>Tue, 26 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://thelucasmoore.github.io/2016/01/26/My-Current-Dev-Environment-And-Workflow-Tips.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/01/26/My-Current-Dev-Environment-And-Workflow-Tips.html</guid>
        
        
      </item>
    
      <item>
        <title>How and Why I Made this Blog</title>
        <description>&lt;p&gt;This website is all about what I learn as a Web Developer as I complete the &lt;a href=&quot;http://learn.co&quot;&gt;Learn.co Coding Bootcamp&lt;/a&gt;. Here live my lessons, notes &amp;amp; reflections as I move towards a career as a Full-Stack Developer. 
&lt;!--excerpt--&gt;&lt;/p&gt;

&lt;p&gt;I believe in learning by doing, so my first lesson is building this very blog, venturing away from the complicated simplicity of Wordpress. I still have my &lt;a href=&quot;http://thelucasmoore.com&quot;&gt;personal blog&lt;/a&gt; for all things personal, but am writing about Ruby on Rails development here.&lt;/p&gt;

&lt;h3 id=&quot;how-i-made-this-blog&quot;&gt;How I Made this Blog&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/jekyll.png&quot; alt=&quot;Jekyll Documentation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This blog is built with Jekyll and hosted on Github Pages. After reading through the documentation for &lt;a href=&quot;http://jekyllrb.com/docs/home/&quot;&gt;Jekyll&lt;/a&gt;, &lt;a href=&quot;https://pages.github.com/&quot;&gt;Github Pages&lt;/a&gt; and &lt;a href=&quot;http://daringfireball.net/projects/markdown/basics&quot;&gt;Markdown&lt;/a&gt;, I built this site in about five minutes and then started writing this post. Here’s how:&lt;/p&gt;

&lt;h1 id=&quot;command-line-web-design&quot;&gt;1. Command Line Web Design&lt;/h1&gt;

&lt;p&gt;Modern web design uses the command line to move swiftly. One can construct complete sites, like this one, in a few lines of code. That’s assuming your development environment is set up, which you can learn in &lt;a href=&quot;http://webdesign.tutsplus.com/articles/the-command-line-for-web-design-introduction--cms-23493&quot;&gt;this great tutorial series&lt;/a&gt; on Terminal for Web Design.&lt;/p&gt;

&lt;h1 id=&quot;make-a-new-jekyll-blog-in-terminal&quot;&gt;2. Make a New Jekyll Blog in Terminal&lt;/h1&gt;

&lt;p&gt;With the Jekyll gem installed, I typed the following into my terminal:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ jekyll new my_blog_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This makes a new Jekyll blog, all tidy and ready to go.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ cd my_blog_name&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This brings me into that newly created folder containing the Jekyll site. I also opened up this folder in &lt;a href=&quot;http://www.sublimetext.com/2&quot;&gt;Sublime Text&lt;/a&gt; to edit it.&lt;/p&gt;

&lt;p&gt;&lt;code&gt;$ jekyll serve&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;This runs the site on localhost, so I can see changes I make at localhost:4000 in my browser.&lt;/p&gt;

&lt;p&gt;Lastly, I edited the &lt;code&gt;_config.yml&lt;/code&gt; to my own information in Sublime.&lt;/p&gt;

&lt;h1 id=&quot;host-it-on-github&quot;&gt;3. Host it on Github&lt;/h1&gt;

&lt;p&gt;I also have this folder set up as a repository on &lt;a href=&quot;https://github.com/TheLucasMoore/thelucasmoore.github.io&quot;&gt;my Github&lt;/a&gt;. Any repository that is set as &lt;em&gt;your-username&lt;/em&gt;.github.io is automatically structured to work on Github Pages. When I update the blog from my computer and push the updates to Github, this website updates. Effortless.&lt;/p&gt;

&lt;h1 id=&quot;write-in-markdownmk&quot;&gt;4. Write in &lt;a href=&quot;http://daringfireball.net/projects/markdown/basics&quot;&gt;Markdown&lt;/a&gt;&lt;/h1&gt;

&lt;p&gt;&lt;img src=&quot;/assets/posts.png&quot; alt=&quot;New Blog Post&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Markdown is a beautifully simple way to write for the web. The syntax took me about 15 minutes to learn, since it’s so intuitive. To make a new blog post, I just create a new file in the &lt;code&gt;_posts&lt;/code&gt; folder that follows the &lt;code&gt;YEAR-MONTH-DAY-title.markdown&lt;/code&gt; naming convention.&lt;/p&gt;

&lt;h1 id=&quot;push-to-a-static-web-page&quot;&gt;5. Push to a Static Web Page&lt;/h1&gt;

&lt;p&gt;Finally, any time I update this site, I push the changes to Github. Jekyll does all the work of compiling the file structure and converting the Markdown to HTML. There is no server database, simply an agile static page.&lt;/p&gt;

</description>
        <pubDate>Sat, 16 Jan 2016 00:00:00 -0600</pubDate>
        <link>http://thelucasmoore.github.io/2016/01/16/How-and-Why-I-Created-This-Blog.html</link>
        <guid isPermaLink="true">http://thelucasmoore.github.io/2016/01/16/How-and-Why-I-Created-This-Blog.html</guid>
        
        
      </item>
    
  </channel>
</rss>
